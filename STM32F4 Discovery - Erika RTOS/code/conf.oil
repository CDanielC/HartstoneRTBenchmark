/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2013  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */


CPU mySystem {

	OS myOs {

		EE_OPT = "DEBUG";
		//EE_OPT = "__KEIL_4_54_OLDER__";
		//EE_OPT = "__KEIL_USE_AXF_EXT__";
		//CFLAGS = "-O0";
		LDFLAGS = "-lm";
		
		
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			APP_SRC = "globals.c";
			APP_SRC = "tasks.c";
			APP_SRC = "whetstone.c";
			APP_SRC = "nutsbolts.c";
			APP_SRC = "base_serial.c";
			//COMPILER_TYPE = KEIL; 
			COMPILER_TYPE = GNU;
			MULTI_STACK = TRUE;
		};

		EE_OPT = "__USE_SYSTICK__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { NAME = "STM32F4XX_SPD"; 
			STM32F4XX_SPD = ENABLE {
                		USEUSART = TRUE;
            		};
		};
		
		LIB = ENABLE {
			NAME = "STM32F4_DISCOVERY";
			STM32F4_DISCOVERY = ENABLE {
                USECOM = TRUE;
			};			
		};

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = TRUE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = TRUE;
		POSTTASKHOOK = TRUE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = ECC1;
		//EE_OPT = "__OO_STARTOS_OLD__";

	};
 	
	COUNTER myCounter {
        MINCYCLE = 2;
		MAXALLOWEDVALUE = 20000 ;
        TICKSPERBASE = 1;
    };
    
	
	ALARM AlarmTask1 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task1; };
	};
	
	ALARM AlarmTask2 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task2; };
	};
	
	ALARM AlarmTask3 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task3; };
	};
	
	ALARM AlarmTask4 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task4; };
	};
	
	ALARM AlarmTask5 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task5; };
	};
	
	ALARM AlarmSuper {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = SuperTask; };
	};
	
	
	
	TASK SuperTask {
		PRIORITY = 8;   /* Highest priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK Task1 {
		PRIORITY = 1;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK Task2 {
		PRIORITY = 2;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK Task3 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK Task4 {
		PRIORITY = 4;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK Task5 {
		PRIORITY = 5;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	/* New Tasks for the fourth experiment */
	ALARM AlarmTaskA1 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA1; };
	};
	
	ALARM AlarmTaskA2 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA2; };
	};
	
	ALARM AlarmTaskA3 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA3; };
	};
	
	ALARM AlarmTaskA4 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA4; };
	};
	
	ALARM AlarmTaskA5 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA5; };
	};
	
	ALARM AlarmTaskA6 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA6; };
	};
	
	ALARM AlarmTaskA7 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA7; };
	};
	
	ALARM AlarmTaskA8 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA8; };
	};
	
	ALARM AlarmTaskA9 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA9; };
	};
	
	ALARM AlarmTaskA10 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskA10; };
	};
	
	TASK TaskA1 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA2 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA3 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA4 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA5 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA6 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA7 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA8 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA9 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskA10 {
		PRIORITY = 3;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	/* */
	
	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};
};
